// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using toeic_web.Models;

#nullable disable

namespace toiec_web.Migrations
{
    [DbContext(typeof(ToeicDbContext))]
    [Migration("20240717194745_update dbs 1")]
    partial class updatedbs1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("toeic_web.Data.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("InsertDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResetPasswords");
                });

            modelBuilder.Entity("toeic_web.Data.ScoreParam", b =>
                {
                    b.Property<int>("correctAnswers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("correctAnswers"), 1L, 1);

                    b.Property<int>("listenningScore")
                        .HasColumnType("int");

                    b.Property<int>("readingScore")
                        .HasColumnType("int");

                    b.HasKey("correctAnswers");

                    b.ToTable("ScoreParams");
                });

            modelBuilder.Entity("toeic_web.Data.TestPart", b =>
                {
                    b.Property<Guid>("partId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("partName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("partId");

                    b.ToTable("TestParts");
                });

            modelBuilder.Entity("toeic_web.Models.Admin", b =>
                {
                    b.Property<Guid>("idAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idAdmin");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("toeic_web.Models.AnswerQuestion", b =>
                {
                    b.Property<Guid>("idAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionidQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idAnswer");

                    b.HasIndex("QuestionidQuestion");

                    b.ToTable("AnswerQuestions");
                });

            modelBuilder.Entity("toeic_web.Models.Comment", b =>
                {
                    b.Property<Guid>("idComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("idCommentReply")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("idComment");

                    b.HasIndex("idLesson");

                    b.HasIndex("idUser");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("toeic_web.Models.Course", b =>
                {
                    b.Property<Guid>("idCourse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idRoadMap")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isVip")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idCourse");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idRoadMap");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("toeic_web.Models.Lesson", b =>
                {
                    b.Property<Guid>("idLesson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idCourse")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("isVip")
                        .HasColumnType("bit");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idLesson");

                    b.HasIndex("idCourse");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("toeic_web.Models.Payment", b =>
                {
                    b.Property<Guid>("idPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idMethod")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idPackage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("paymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idPayment");

                    b.HasIndex("idMethod");

                    b.HasIndex("idPackage");

                    b.HasIndex("idStudent");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("toeic_web.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("idMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idMethod");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("toeic_web.Models.Professor", b =>
                {
                    b.Property<Guid>("idProfessor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idProfessor");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("toeic_web.Models.Question", b =>
                {
                    b.Property<Guid>("idQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("choice_4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("explaination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("idQuiz")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("idUnit")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("idQuestion");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idQuiz");

                    b.HasIndex("idUnit");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("toeic_web.Models.Quiz", b =>
                {
                    b.Property<Guid>("idQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idLesson")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idQuiz");

                    b.HasIndex("idLesson");

                    b.ToTable("Quizs");
                });

            modelBuilder.Entity("toeic_web.Models.Report", b =>
                {
                    b.Property<Guid>("idReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("checkNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("commentDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("idComment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isCheck")
                        .HasColumnType("bit");

                    b.Property<string>("reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("reportDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idReport");

                    b.HasIndex("idComment");

                    b.HasIndex("idUser");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("toeic_web.Models.Student", b =>
                {
                    b.Property<Guid>("idStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("freeTest")
                        .HasColumnType("bit");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("idStudent");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("toeic_web.Models.Test", b =>
                {
                    b.Property<Guid>("idTest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idProfessor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("idRoadMap")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("idType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("isVip")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("useDate")
                        .HasColumnType("datetime2");

                    b.HasKey("idTest");

                    b.HasIndex("idProfessor");

                    b.HasIndex("idRoadMap");

                    b.HasIndex("idType");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("toeic_web.Models.TestQuestionUnit", b =>
                {
                    b.Property<Guid>("idQuestionUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("audio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idTest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTestPart")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paragraph")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("script")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("translation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idQuestionUnit");

                    b.HasIndex("idTest");

                    b.HasIndex("idTestPart");

                    b.ToTable("TestQuestionUnits");
                });

            modelBuilder.Entity("toeic_web.Models.TestRecord", b =>
                {
                    b.Property<Guid>("idRecord")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("correctAns")
                        .HasColumnType("int");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idTest")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("listenCorrect")
                        .HasColumnType("int");

                    b.Property<int>("listenScore")
                        .HasColumnType("int");

                    b.Property<int>("readScore")
                        .HasColumnType("int");

                    b.Property<int>("readingCorrect")
                        .HasColumnType("int");

                    b.Property<int>("totalScore")
                        .HasColumnType("int");

                    b.Property<int>("wrongAns")
                        .HasColumnType("int");

                    b.HasKey("idRecord");

                    b.HasIndex("idStudent");

                    b.HasIndex("idTest");

                    b.ToTable("TestRecords");
                });

            modelBuilder.Entity("toeic_web.Models.TestType", b =>
                {
                    b.Property<Guid>("idTestType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idTestType");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("toeic_web.Models.UserAnswer", b =>
                {
                    b.Property<Guid>("idUAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idQuestion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idRecord")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("state")
                        .HasColumnType("bit");

                    b.Property<string>("userChoice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idUAnswer");

                    b.HasIndex("idQuestion");

                    b.HasIndex("idRecord");

                    b.HasIndex("idStudent");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("toeic_web.Models.VipPackage", b =>
                {
                    b.Property<Guid>("idPackage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<Guid>("idAdmin")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("idPackage");

                    b.HasIndex("idAdmin");

                    b.ToTable("VipPackages");
                });

            modelBuilder.Entity("toeic_web.Models.VipStudent", b =>
                {
                    b.Property<Guid>("idVipStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("idStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("vipExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("idVipStudent");

                    b.HasIndex("idStudent")
                        .IsUnique();

                    b.ToTable("VipStudents");
                });

            modelBuilder.Entity("toeic_web.Models.Vocabulary", b =>
                {
                    b.Property<Guid>("idVoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("engWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("example")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("idList")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("meaning")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pronunciation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<string>("topic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("wordType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVoc");

                    b.HasIndex("UsersId");

                    b.HasIndex("idList");

                    b.HasIndex("idVoc");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("toeic_web.Models.VocList", b =>
                {
                    b.Property<Guid>("idVocList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("idRoadMap")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("idUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.Property<double>("quantity")
                        .HasColumnType("float");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idVocList");

                    b.HasIndex("idRoadMap");

                    b.HasIndex("idUser");

                    b.ToTable("VocList");
                });

            modelBuilder.Entity("toiec_web.Data.AccessHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessHistories");
                });

            modelBuilder.Entity("toiec_web.Data.RoadMap", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoadMaps");
                });

            modelBuilder.Entity("toiec_web.Data.UserChatBot", b =>
                {
                    b.Property<string>("idUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("availableChat")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastReset")
                        .HasColumnType("datetime2");

                    b.HasKey("idUser");

                    b.ToTable("UserChatBots");
                });

            modelBuilder.Entity("toiec_web.Data.UserRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdRoadMap")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdRoadMap");

                    b.HasIndex("IdUser");

                    b.ToTable("UserRoutes");
                });

            modelBuilder.Entity("toeic_web.Models.Users", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("toeic_web.Models.Admin", b =>
                {
                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithOne("Admin")
                        .HasForeignKey("toeic_web.Models.Admin", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AdminOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Models.AnswerQuestion", b =>
                {
                    b.HasOne("toeic_web.Models.Question", "Question")
                        .WithMany("AnswerQuestions")
                        .HasForeignKey("QuestionidQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("toeic_web.Models.Comment", b =>
                {
                    b.HasOne("toeic_web.Models.Lesson", "Lessons")
                        .WithMany("Comments")
                        .HasForeignKey("idLesson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentsOfLesson");

                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentsOfUser");

                    b.Navigation("Lessons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Models.Course", b =>
                {
                    b.HasOne("toeic_web.Models.Professor", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("FK_CourseOfProfessor");

                    b.HasOne("toiec_web.Data.RoadMap", "RoadMap")
                        .WithMany("Courses")
                        .HasForeignKey("idRoadMap")
                        .HasConstraintName("FK_CourseOfRoadMap");

                    b.Navigation("Professor");

                    b.Navigation("RoadMap");
                });

            modelBuilder.Entity("toeic_web.Models.Lesson", b =>
                {
                    b.HasOne("toeic_web.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("idCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LessonOfCourse");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("toeic_web.Models.Payment", b =>
                {
                    b.HasOne("toeic_web.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("idMethod")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfMethod");

                    b.HasOne("toeic_web.Models.VipPackage", "VipPackage")
                        .WithMany("Payments")
                        .HasForeignKey("idPackage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfVipPackage");

                    b.HasOne("toeic_web.Models.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("PaymentOfStudent");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Student");

                    b.Navigation("VipPackage");
                });

            modelBuilder.Entity("toeic_web.Models.Professor", b =>
                {
                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithOne("Professor")
                        .HasForeignKey("toeic_web.Models.Professor", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfessorOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Models.Question", b =>
                {
                    b.HasOne("toeic_web.Models.Professor", "Professor")
                        .WithMany("Questions")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionsOfProfessor");

                    b.HasOne("toeic_web.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("idQuiz")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuestionsOfQuiz");

                    b.HasOne("toeic_web.Models.TestQuestionUnit", "TestQuestionUnit")
                        .WithMany("Questions")
                        .HasForeignKey("idUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_QuestionsOfUnit");

                    b.Navigation("Professor");

                    b.Navigation("Quiz");

                    b.Navigation("TestQuestionUnit");
                });

            modelBuilder.Entity("toeic_web.Models.Quiz", b =>
                {
                    b.HasOne("toeic_web.Models.Lesson", "Lesson")
                        .WithMany("Quizzes")
                        .HasForeignKey("idLesson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_QuizzesOfLesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("toeic_web.Models.Report", b =>
                {
                    b.HasOne("toeic_web.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("idComment")
                        .IsRequired()
                        .HasConstraintName("FK_ReportOfComment");

                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithMany("Reports")
                        .HasForeignKey("idUser")
                        .IsRequired()
                        .HasConstraintName("FK_ReportsOfUser");

                    b.Navigation("Comment");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Models.Student", b =>
                {
                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithOne("Student")
                        .HasForeignKey("toeic_web.Models.Student", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentOfUser");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Models.Test", b =>
                {
                    b.HasOne("toeic_web.Models.Professor", "Professor")
                        .WithMany("Tests")
                        .HasForeignKey("idProfessor")
                        .IsRequired()
                        .HasConstraintName("TestOfProfessor");

                    b.HasOne("toiec_web.Data.RoadMap", "RoadMap")
                        .WithMany("Tests")
                        .HasForeignKey("idRoadMap")
                        .HasConstraintName("TestOfRoadMap");

                    b.HasOne("toeic_web.Models.TestType", "TestType")
                        .WithMany("Tests")
                        .HasForeignKey("idType")
                        .IsRequired()
                        .HasConstraintName("TypeTest");

                    b.Navigation("Professor");

                    b.Navigation("RoadMap");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("toeic_web.Models.TestQuestionUnit", b =>
                {
                    b.HasOne("toeic_web.Models.Test", "Test")
                        .WithMany("TestQuestionUnits")
                        .HasForeignKey("idTest")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UnitsOfTest");

                    b.HasOne("toeic_web.Data.TestPart", "TestPart")
                        .WithMany("TestQuestionUnits")
                        .HasForeignKey("idTestPart")
                        .IsRequired()
                        .HasConstraintName("FK_UnitOfTestPart");

                    b.Navigation("Test");

                    b.Navigation("TestPart");
                });

            modelBuilder.Entity("toeic_web.Models.TestRecord", b =>
                {
                    b.HasOne("toeic_web.Models.Student", "Student")
                        .WithMany("TestRecords")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RecordOfStudent");

                    b.HasOne("toeic_web.Models.Test", "Test")
                        .WithMany("TestRecords")
                        .HasForeignKey("idTest")
                        .IsRequired()
                        .HasConstraintName("RecordOfTest");

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("toeic_web.Models.UserAnswer", b =>
                {
                    b.HasOne("toeic_web.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idQuestion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerOfQuestion");

                    b.HasOne("toeic_web.Models.TestRecord", "TestRecord")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idRecord")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RecordAnswer");

                    b.HasOne("toeic_web.Models.Student", "Student")
                        .WithMany("UserAnswers")
                        .HasForeignKey("idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AnswerOfStudent");

                    b.Navigation("Question");

                    b.Navigation("Student");

                    b.Navigation("TestRecord");
                });

            modelBuilder.Entity("toeic_web.Models.VipPackage", b =>
                {
                    b.HasOne("toeic_web.Models.Admin", "Admin")
                        .WithMany("VipPackages")
                        .HasForeignKey("idAdmin")
                        .IsRequired()
                        .HasConstraintName("FK_ManageVipPackage");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("toeic_web.Models.VipStudent", b =>
                {
                    b.HasOne("toeic_web.Models.Student", "Student")
                        .WithOne("VipStudent")
                        .HasForeignKey("toeic_web.Models.VipStudent", "idStudent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VipStudentOfStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("toeic_web.Models.Vocabulary", b =>
                {
                    b.HasOne("toeic_web.Models.Users", null)
                        .WithMany("Vocabulary")
                        .HasForeignKey("UsersId");

                    b.HasOne("toeic_web.Models.VocList", "VocTopic")
                        .WithMany("Vocabularies")
                        .HasForeignKey("idList")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VocOfTopic");

                    b.Navigation("VocTopic");
                });

            modelBuilder.Entity("toeic_web.Models.VocList", b =>
                {
                    b.HasOne("toiec_web.Data.RoadMap", "RoadMap")
                        .WithMany("VocLists")
                        .HasForeignKey("idRoadMap")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TopicOfRoadMap");

                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithMany("VocTopics")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TopicOfUser");

                    b.Navigation("RoadMap");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Data.AccessHistory", b =>
                {
                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithMany("AccessHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toiec_web.Data.UserRoute", b =>
                {
                    b.HasOne("toiec_web.Data.RoadMap", "RoadMap")
                        .WithMany("UserRoutes")
                        .HasForeignKey("IdRoadMap")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRouteOfRoadMap");

                    b.HasOne("toeic_web.Models.Users", "Users")
                        .WithMany("UserRoutes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserRouteOfUser");

                    b.Navigation("RoadMap");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("toeic_web.Data.TestPart", b =>
                {
                    b.Navigation("TestQuestionUnits");
                });

            modelBuilder.Entity("toeic_web.Models.Admin", b =>
                {
                    b.Navigation("VipPackages");
                });

            modelBuilder.Entity("toeic_web.Models.Comment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("toeic_web.Models.Course", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("toeic_web.Models.Lesson", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("toeic_web.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("toeic_web.Models.Professor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Questions");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("toeic_web.Models.Question", b =>
                {
                    b.Navigation("AnswerQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("toeic_web.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("toeic_web.Models.Student", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("TestRecords");

                    b.Navigation("UserAnswers");

                    b.Navigation("VipStudent")
                        .IsRequired();
                });

            modelBuilder.Entity("toeic_web.Models.Test", b =>
                {
                    b.Navigation("TestQuestionUnits");

                    b.Navigation("TestRecords");
                });

            modelBuilder.Entity("toeic_web.Models.TestQuestionUnit", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("toeic_web.Models.TestRecord", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("toeic_web.Models.TestType", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("toeic_web.Models.VipPackage", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("toeic_web.Models.VocList", b =>
                {
                    b.Navigation("Vocabularies");
                });

            modelBuilder.Entity("toiec_web.Data.RoadMap", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Tests");

                    b.Navigation("UserRoutes");

                    b.Navigation("VocLists");
                });

            modelBuilder.Entity("toeic_web.Models.Users", b =>
                {
                    b.Navigation("AccessHistory");

                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Professor")
                        .IsRequired();

                    b.Navigation("Reports");

                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("UserRoutes");

                    b.Navigation("VocTopics");

                    b.Navigation("Vocabulary");
                });
#pragma warning restore 612, 618
        }
    }
}
